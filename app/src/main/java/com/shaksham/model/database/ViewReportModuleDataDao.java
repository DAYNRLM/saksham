package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIEW_REPORT_MODULE_DATA".
*/
public class ViewReportModuleDataDao extends AbstractDao<ViewReportModuleData, Long> {

    public static final String TABLENAME = "VIEW_REPORT_MODULE_DATA";

    /**
     * Properties of entity ViewReportModuleData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MonthCode = new Property(1, String.class, "monthCode", false, "MONTH_CODE");
        public final static Property Year = new Property(2, String.class, "year", false, "YEAR");
        public final static Property TringngCode = new Property(3, String.class, "tringngCode", false, "TRINGNG_CODE");
        public final static Property ModuleId = new Property(4, String.class, "moduleId", false, "MODULE_ID");
    }


    public ViewReportModuleDataDao(DaoConfig config) {
        super(config);
    }
    
    public ViewReportModuleDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIEW_REPORT_MODULE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MONTH_CODE\" TEXT," + // 1: monthCode
                "\"YEAR\" TEXT," + // 2: year
                "\"TRINGNG_CODE\" TEXT," + // 3: tringngCode
                "\"MODULE_ID\" TEXT);"); // 4: moduleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIEW_REPORT_MODULE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ViewReportModuleData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String monthCode = entity.getMonthCode();
        if (monthCode != null) {
            stmt.bindString(2, monthCode);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String tringngCode = entity.getTringngCode();
        if (tringngCode != null) {
            stmt.bindString(4, tringngCode);
        }
 
        String moduleId = entity.getModuleId();
        if (moduleId != null) {
            stmt.bindString(5, moduleId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ViewReportModuleData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String monthCode = entity.getMonthCode();
        if (monthCode != null) {
            stmt.bindString(2, monthCode);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String tringngCode = entity.getTringngCode();
        if (tringngCode != null) {
            stmt.bindString(4, tringngCode);
        }
 
        String moduleId = entity.getModuleId();
        if (moduleId != null) {
            stmt.bindString(5, moduleId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ViewReportModuleData readEntity(Cursor cursor, int offset) {
        ViewReportModuleData entity = new ViewReportModuleData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // monthCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // year
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tringngCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // moduleId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ViewReportModuleData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMonthCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYear(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTringngCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModuleId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ViewReportModuleData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ViewReportModuleData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ViewReportModuleData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHG_MEMBER_DATA".
*/
public class ShgMemberDataDao extends AbstractDao<ShgMemberData, Void> {

    public static final String TABLENAME = "SHG_MEMBER_DATA";

    /**
     * Properties of entity ShgMemberData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ShgMemberCode = new Property(0, String.class, "shgMemberCode", false, "SHG_MEMBER_CODE");
        public final static Property ShgMemberName = new Property(1, String.class, "shgMemberName", false, "SHG_MEMBER_NAME");
        public final static Property ShgCode = new Property(2, String.class, "shgCode", false, "SHG_CODE");
    }


    public ShgMemberDataDao(DaoConfig config) {
        super(config);
    }
    
    public ShgMemberDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHG_MEMBER_DATA\" (" + //
                "\"SHG_MEMBER_CODE\" TEXT," + // 0: shgMemberCode
                "\"SHG_MEMBER_NAME\" TEXT," + // 1: shgMemberName
                "\"SHG_CODE\" TEXT);"); // 2: shgCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHG_MEMBER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShgMemberData entity) {
        stmt.clearBindings();
 
        String shgMemberCode = entity.getShgMemberCode();
        if (shgMemberCode != null) {
            stmt.bindString(1, shgMemberCode);
        }
 
        String shgMemberName = entity.getShgMemberName();
        if (shgMemberName != null) {
            stmt.bindString(2, shgMemberName);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShgMemberData entity) {
        stmt.clearBindings();
 
        String shgMemberCode = entity.getShgMemberCode();
        if (shgMemberCode != null) {
            stmt.bindString(1, shgMemberCode);
        }
 
        String shgMemberName = entity.getShgMemberName();
        if (shgMemberName != null) {
            stmt.bindString(2, shgMemberName);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ShgMemberData readEntity(Cursor cursor, int offset) {
        ShgMemberData entity = new ShgMemberData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // shgMemberCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shgMemberName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // shgCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShgMemberData entity, int offset) {
        entity.setShgMemberCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setShgMemberName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShgCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ShgMemberData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ShgMemberData entity) {
        return null;
    }

    @Override
    public boolean hasKey(ShgMemberData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

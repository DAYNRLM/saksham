package com.shaksham.model.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_INFO_DETAIL".
*/
public class QuestionInfoDetailDao extends AbstractDao<QuestionInfoDetail, Long> {

    public static final String TABLENAME = "QUESTION_INFO_DETAIL";

    /**
     * Properties of entity QuestionInfoDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutogenratedQuestionId = new Property(0, Long.class, "autogenratedQuestionId", true, "_id");
        public final static Property QuestionId = new Property(1, Long.class, "questionId", false, "QUESTION_ID");
        public final static Property QuestionMainId = new Property(2, String.class, "questionMainId", false, "QUESTION_MAIN_ID");
        public final static Property QuestionTypeId = new Property(3, String.class, "questionTypeId", false, "QUESTION_TYPE_ID");
        public final static Property QuestionName = new Property(4, String.class, "questionName", false, "QUESTION_NAME");
        public final static Property TitleId = new Property(5, Long.class, "titleId", false, "TITLE_ID");
        public final static Property LanguageId = new Property(6, String.class, "languageId", false, "LANGUAGE_ID");
    }

    private DaoSession daoSession;

    private Query<QuestionInfoDetail> titleInfoDetail_QuestionDataListQuery;

    public QuestionInfoDetailDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionInfoDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_INFO_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autogenratedQuestionId
                "\"QUESTION_ID\" INTEGER," + // 1: questionId
                "\"QUESTION_MAIN_ID\" TEXT," + // 2: questionMainId
                "\"QUESTION_TYPE_ID\" TEXT," + // 3: questionTypeId
                "\"QUESTION_NAME\" TEXT," + // 4: questionName
                "\"TITLE_ID\" INTEGER," + // 5: titleId
                "\"LANGUAGE_ID\" TEXT);"); // 6: languageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_INFO_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionInfoDetail entity) {
        stmt.clearBindings();
 
        Long autogenratedQuestionId = entity.getAutogenratedQuestionId();
        if (autogenratedQuestionId != null) {
            stmt.bindLong(1, autogenratedQuestionId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(2, questionId);
        }
 
        String questionMainId = entity.getQuestionMainId();
        if (questionMainId != null) {
            stmt.bindString(3, questionMainId);
        }
 
        String questionTypeId = entity.getQuestionTypeId();
        if (questionTypeId != null) {
            stmt.bindString(4, questionTypeId);
        }
 
        String questionName = entity.getQuestionName();
        if (questionName != null) {
            stmt.bindString(5, questionName);
        }
 
        Long titleId = entity.getTitleId();
        if (titleId != null) {
            stmt.bindLong(6, titleId);
        }
 
        String languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindString(7, languageId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionInfoDetail entity) {
        stmt.clearBindings();
 
        Long autogenratedQuestionId = entity.getAutogenratedQuestionId();
        if (autogenratedQuestionId != null) {
            stmt.bindLong(1, autogenratedQuestionId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(2, questionId);
        }
 
        String questionMainId = entity.getQuestionMainId();
        if (questionMainId != null) {
            stmt.bindString(3, questionMainId);
        }
 
        String questionTypeId = entity.getQuestionTypeId();
        if (questionTypeId != null) {
            stmt.bindString(4, questionTypeId);
        }
 
        String questionName = entity.getQuestionName();
        if (questionName != null) {
            stmt.bindString(5, questionName);
        }
 
        Long titleId = entity.getTitleId();
        if (titleId != null) {
            stmt.bindLong(6, titleId);
        }
 
        String languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindString(7, languageId);
        }
    }

    @Override
    protected final void attachEntity(QuestionInfoDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionInfoDetail readEntity(Cursor cursor, int offset) {
        QuestionInfoDetail entity = new QuestionInfoDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autogenratedQuestionId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // questionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // questionMainId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // questionTypeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // questionName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // titleId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // languageId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionInfoDetail entity, int offset) {
        entity.setAutogenratedQuestionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestionId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQuestionMainId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestionTypeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestionName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitleId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLanguageId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionInfoDetail entity, long rowId) {
        entity.setAutogenratedQuestionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionInfoDetail entity) {
        if(entity != null) {
            return entity.getAutogenratedQuestionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionInfoDetail entity) {
        return entity.getAutogenratedQuestionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "questionDataList" to-many relationship of TitleInfoDetail. */
    public List<QuestionInfoDetail> _queryTitleInfoDetail_QuestionDataList(Long titleId) {
        synchronized (this) {
            if (titleInfoDetail_QuestionDataListQuery == null) {
                QueryBuilder<QuestionInfoDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TitleId.eq(null));
                titleInfoDetail_QuestionDataListQuery = queryBuilder.build();
            }
        }
        Query<QuestionInfoDetail> query = titleInfoDetail_QuestionDataListQuery.forCurrentThread();
        query.setParameter(0, titleId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTitleInfoDetailDao().getAllColumns());
            builder.append(" FROM QUESTION_INFO_DETAIL T");
            builder.append(" LEFT JOIN TITLE_INFO_DETAIL T0 ON T.\"TITLE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected QuestionInfoDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        QuestionInfoDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TitleInfoDetail titles = loadCurrentOther(daoSession.getTitleInfoDetailDao(), cursor, offset);
        entity.setTitles(titles);

        return entity;    
    }

    public QuestionInfoDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<QuestionInfoDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<QuestionInfoDetail> list = new ArrayList<QuestionInfoDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<QuestionInfoDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<QuestionInfoDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

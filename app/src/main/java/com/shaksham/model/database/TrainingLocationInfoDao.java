package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAINING_LOCATION_INFO".
*/
public class TrainingLocationInfoDao extends AbstractDao<TrainingLocationInfo, Long> {

    public static final String TABLENAME = "TRAINING_LOCATION_INFO";

    /**
     * Properties of entity TrainingLocationInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrainingId = new Property(1, String.class, "trainingId", false, "TRAINING_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property BlockId = new Property(3, String.class, "blockId", false, "BLOCK_ID");
        public final static Property GpId = new Property(4, String.class, "gpId", false, "GP_ID");
        public final static Property VillageId = new Property(5, String.class, "villageId", false, "VILLAGE_ID");
        public final static Property SelectedShgCount = new Property(6, String.class, "selectedShgCount", false, "SELECTED_SHG_COUNT");
        public final static Property MemberParticipant = new Property(7, String.class, "memberParticipant", false, "MEMBER_PARTICIPANT");
        public final static Property OtherParticipant = new Property(8, String.class, "otherParticipant", false, "OTHER_PARTICIPANT");
        public final static Property TotalParticipant = new Property(9, String.class, "totalParticipant", false, "TOTAL_PARTICIPANT");
        public final static Property Image = new Property(10, byte[].class, "image", false, "IMAGE");
        public final static Property GpsLocation = new Property(11, String.class, "gpsLocation", false, "GPS_LOCATION");
        public final static Property SyncStatus = new Property(12, String.class, "syncStatus", false, "SYNC_STATUS");
    }


    public TrainingLocationInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TrainingLocationInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAINING_LOCATION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRAINING_ID\" TEXT," + // 1: trainingId
                "\"DATE\" TEXT," + // 2: date
                "\"BLOCK_ID\" TEXT," + // 3: blockId
                "\"GP_ID\" TEXT," + // 4: gpId
                "\"VILLAGE_ID\" TEXT," + // 5: villageId
                "\"SELECTED_SHG_COUNT\" TEXT," + // 6: selectedShgCount
                "\"MEMBER_PARTICIPANT\" TEXT," + // 7: memberParticipant
                "\"OTHER_PARTICIPANT\" TEXT," + // 8: otherParticipant
                "\"TOTAL_PARTICIPANT\" TEXT," + // 9: totalParticipant
                "\"IMAGE\" BLOB," + // 10: image
                "\"GPS_LOCATION\" TEXT," + // 11: gpsLocation
                "\"SYNC_STATUS\" TEXT);"); // 12: syncStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAINING_LOCATION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrainingLocationInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trainingId = entity.getTrainingId();
        if (trainingId != null) {
            stmt.bindString(2, trainingId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String blockId = entity.getBlockId();
        if (blockId != null) {
            stmt.bindString(4, blockId);
        }
 
        String gpId = entity.getGpId();
        if (gpId != null) {
            stmt.bindString(5, gpId);
        }
 
        String villageId = entity.getVillageId();
        if (villageId != null) {
            stmt.bindString(6, villageId);
        }
 
        String selectedShgCount = entity.getSelectedShgCount();
        if (selectedShgCount != null) {
            stmt.bindString(7, selectedShgCount);
        }
 
        String memberParticipant = entity.getMemberParticipant();
        if (memberParticipant != null) {
            stmt.bindString(8, memberParticipant);
        }
 
        String otherParticipant = entity.getOtherParticipant();
        if (otherParticipant != null) {
            stmt.bindString(9, otherParticipant);
        }
 
        String totalParticipant = entity.getTotalParticipant();
        if (totalParticipant != null) {
            stmt.bindString(10, totalParticipant);
        }
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(11, image);
        }
 
        String gpsLocation = entity.getGpsLocation();
        if (gpsLocation != null) {
            stmt.bindString(12, gpsLocation);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(13, syncStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrainingLocationInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trainingId = entity.getTrainingId();
        if (trainingId != null) {
            stmt.bindString(2, trainingId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String blockId = entity.getBlockId();
        if (blockId != null) {
            stmt.bindString(4, blockId);
        }
 
        String gpId = entity.getGpId();
        if (gpId != null) {
            stmt.bindString(5, gpId);
        }
 
        String villageId = entity.getVillageId();
        if (villageId != null) {
            stmt.bindString(6, villageId);
        }
 
        String selectedShgCount = entity.getSelectedShgCount();
        if (selectedShgCount != null) {
            stmt.bindString(7, selectedShgCount);
        }
 
        String memberParticipant = entity.getMemberParticipant();
        if (memberParticipant != null) {
            stmt.bindString(8, memberParticipant);
        }
 
        String otherParticipant = entity.getOtherParticipant();
        if (otherParticipant != null) {
            stmt.bindString(9, otherParticipant);
        }
 
        String totalParticipant = entity.getTotalParticipant();
        if (totalParticipant != null) {
            stmt.bindString(10, totalParticipant);
        }
 
        byte[] image = entity.getImage();
        if (image != null) {
            stmt.bindBlob(11, image);
        }
 
        String gpsLocation = entity.getGpsLocation();
        if (gpsLocation != null) {
            stmt.bindString(12, gpsLocation);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(13, syncStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrainingLocationInfo readEntity(Cursor cursor, int offset) {
        TrainingLocationInfo entity = new TrainingLocationInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trainingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blockId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gpId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // villageId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // selectedShgCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memberParticipant
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // otherParticipant
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // totalParticipant
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // image
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gpsLocation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // syncStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrainingLocationInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlockId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGpId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVillageId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSelectedShgCount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMemberParticipant(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOtherParticipant(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotalParticipant(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImage(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setGpsLocation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSyncStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrainingLocationInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrainingLocationInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrainingLocationInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVALUATION_SYNC_DATA".
*/
public class EvaluationSyncDataDao extends AbstractDao<EvaluationSyncData, Long> {

    public static final String TABLENAME = "EVALUATION_SYNC_DATA";

    /**
     * Properties of entity EvaluationSyncData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrainingId = new Property(1, String.class, "trainingId", false, "TRAINING_ID");
        public final static Property ShgCode = new Property(2, String.class, "shgCode", false, "SHG_CODE");
        public final static Property EvaluationDate = new Property(3, String.class, "evaluationDate", false, "EVALUATION_DATE");
        public final static Property EvaluationSyncStatus = new Property(4, String.class, "evaluationSyncStatus", false, "EVALUATION_SYNC_STATUS");
    }


    public EvaluationSyncDataDao(DaoConfig config) {
        super(config);
    }
    
    public EvaluationSyncDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVALUATION_SYNC_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRAINING_ID\" TEXT," + // 1: trainingId
                "\"SHG_CODE\" TEXT," + // 2: shgCode
                "\"EVALUATION_DATE\" TEXT," + // 3: evaluationDate
                "\"EVALUATION_SYNC_STATUS\" TEXT);"); // 4: evaluationSyncStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVALUATION_SYNC_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvaluationSyncData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trainingId = entity.getTrainingId();
        if (trainingId != null) {
            stmt.bindString(2, trainingId);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String evaluationDate = entity.getEvaluationDate();
        if (evaluationDate != null) {
            stmt.bindString(4, evaluationDate);
        }
 
        String evaluationSyncStatus = entity.getEvaluationSyncStatus();
        if (evaluationSyncStatus != null) {
            stmt.bindString(5, evaluationSyncStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvaluationSyncData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trainingId = entity.getTrainingId();
        if (trainingId != null) {
            stmt.bindString(2, trainingId);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String evaluationDate = entity.getEvaluationDate();
        if (evaluationDate != null) {
            stmt.bindString(4, evaluationDate);
        }
 
        String evaluationSyncStatus = entity.getEvaluationSyncStatus();
        if (evaluationSyncStatus != null) {
            stmt.bindString(5, evaluationSyncStatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvaluationSyncData readEntity(Cursor cursor, int offset) {
        EvaluationSyncData entity = new EvaluationSyncData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trainingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shgCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // evaluationDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // evaluationSyncStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvaluationSyncData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShgCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEvaluationDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEvaluationSyncStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvaluationSyncData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvaluationSyncData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvaluationSyncData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVALUATION_SYNC_SHG_DATA".
*/
public class EvaluationSyncShgDataDao extends AbstractDao<EvaluationSyncShgData, Long> {

    public static final String TABLENAME = "EVALUATION_SYNC_SHG_DATA";

    /**
     * Properties of entity EvaluationSyncShgData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrainingCode = new Property(1, String.class, "trainingCode", false, "TRAINING_CODE");
        public final static Property ShgCode = new Property(2, String.class, "shgCode", false, "SHG_CODE");
        public final static Property TotalMember = new Property(3, String.class, "totalMember", false, "TOTAL_MEMBER");
        public final static Property EvaluationSyncStatus = new Property(4, String.class, "evaluationSyncStatus", false, "EVALUATION_SYNC_STATUS");
        public final static Property EvaluationDate = new Property(5, String.class, "evaluationDate", false, "EVALUATION_DATE");
        public final static Property VillageCode = new Property(6, String.class, "villageCode", false, "VILLAGE_CODE");
        public final static Property EvaluationYear = new Property(7, String.class, "evaluationYear", false, "EVALUATION_YEAR");
        public final static Property EvaluationType = new Property(8, String.class, "evaluationType", false, "EVALUATION_TYPE");
        public final static Property LatLong = new Property(9, String.class, "latLong", false, "LAT_LONG");
        public final static Property EvaluationMemberCount = new Property(10, String.class, "EvaluationMemberCount", false, "EVALUATION_MEMBER_COUNT");
    }


    public EvaluationSyncShgDataDao(DaoConfig config) {
        super(config);
    }
    
    public EvaluationSyncShgDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVALUATION_SYNC_SHG_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRAINING_CODE\" TEXT," + // 1: trainingCode
                "\"SHG_CODE\" TEXT," + // 2: shgCode
                "\"TOTAL_MEMBER\" TEXT," + // 3: totalMember
                "\"EVALUATION_SYNC_STATUS\" TEXT," + // 4: evaluationSyncStatus
                "\"EVALUATION_DATE\" TEXT," + // 5: evaluationDate
                "\"VILLAGE_CODE\" TEXT," + // 6: villageCode
                "\"EVALUATION_YEAR\" TEXT," + // 7: evaluationYear
                "\"EVALUATION_TYPE\" TEXT," + // 8: evaluationType
                "\"LAT_LONG\" TEXT," + // 9: latLong
                "\"EVALUATION_MEMBER_COUNT\" TEXT);"); // 10: EvaluationMemberCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVALUATION_SYNC_SHG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvaluationSyncShgData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trainingCode = entity.getTrainingCode();
        if (trainingCode != null) {
            stmt.bindString(2, trainingCode);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String totalMember = entity.getTotalMember();
        if (totalMember != null) {
            stmt.bindString(4, totalMember);
        }
 
        String evaluationSyncStatus = entity.getEvaluationSyncStatus();
        if (evaluationSyncStatus != null) {
            stmt.bindString(5, evaluationSyncStatus);
        }
 
        String evaluationDate = entity.getEvaluationDate();
        if (evaluationDate != null) {
            stmt.bindString(6, evaluationDate);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(7, villageCode);
        }
 
        String evaluationYear = entity.getEvaluationYear();
        if (evaluationYear != null) {
            stmt.bindString(8, evaluationYear);
        }
 
        String evaluationType = entity.getEvaluationType();
        if (evaluationType != null) {
            stmt.bindString(9, evaluationType);
        }
 
        String latLong = entity.getLatLong();
        if (latLong != null) {
            stmt.bindString(10, latLong);
        }
 
        String EvaluationMemberCount = entity.getEvaluationMemberCount();
        if (EvaluationMemberCount != null) {
            stmt.bindString(11, EvaluationMemberCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvaluationSyncShgData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trainingCode = entity.getTrainingCode();
        if (trainingCode != null) {
            stmt.bindString(2, trainingCode);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String totalMember = entity.getTotalMember();
        if (totalMember != null) {
            stmt.bindString(4, totalMember);
        }
 
        String evaluationSyncStatus = entity.getEvaluationSyncStatus();
        if (evaluationSyncStatus != null) {
            stmt.bindString(5, evaluationSyncStatus);
        }
 
        String evaluationDate = entity.getEvaluationDate();
        if (evaluationDate != null) {
            stmt.bindString(6, evaluationDate);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(7, villageCode);
        }
 
        String evaluationYear = entity.getEvaluationYear();
        if (evaluationYear != null) {
            stmt.bindString(8, evaluationYear);
        }
 
        String evaluationType = entity.getEvaluationType();
        if (evaluationType != null) {
            stmt.bindString(9, evaluationType);
        }
 
        String latLong = entity.getLatLong();
        if (latLong != null) {
            stmt.bindString(10, latLong);
        }
 
        String EvaluationMemberCount = entity.getEvaluationMemberCount();
        if (EvaluationMemberCount != null) {
            stmt.bindString(11, EvaluationMemberCount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvaluationSyncShgData readEntity(Cursor cursor, int offset) {
        EvaluationSyncShgData entity = new EvaluationSyncShgData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trainingCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shgCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // totalMember
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // evaluationSyncStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // evaluationDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // villageCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // evaluationYear
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // evaluationType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // latLong
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // EvaluationMemberCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvaluationSyncShgData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrainingCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShgCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotalMember(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEvaluationSyncStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEvaluationDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVillageCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEvaluationYear(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEvaluationType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLatLong(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEvaluationMemberCount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvaluationSyncShgData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvaluationSyncShgData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvaluationSyncShgData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

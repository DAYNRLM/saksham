package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIEW_REPORT_TRAINING_DATA".
*/
public class ViewReportTrainingDataDao extends AbstractDao<ViewReportTrainingData, Long> {

    public static final String TABLENAME = "VIEW_REPORT_TRAINING_DATA";

    /**
     * Properties of entity ViewReportTrainingData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MonthCode = new Property(1, String.class, "monthCode", false, "MONTH_CODE");
        public final static Property Year = new Property(2, String.class, "year", false, "YEAR");
        public final static Property BlockCode = new Property(3, String.class, "blockCode", false, "BLOCK_CODE");
        public final static Property VillageCode = new Property(4, String.class, "villageCode", false, "VILLAGE_CODE");
        public final static Property GpCode = new Property(5, String.class, "gpCode", false, "GP_CODE");
        public final static Property OtherParticipant = new Property(6, String.class, "otherParticipant", false, "OTHER_PARTICIPANT");
        public final static Property MemberParticipant = new Property(7, String.class, "memberParticipant", false, "MEMBER_PARTICIPANT");
        public final static Property TrainingCode = new Property(8, String.class, "trainingCode", false, "TRAINING_CODE");
        public final static Property DateOfTraining = new Property(9, String.class, "dateOfTraining", false, "DATE_OF_TRAINING");
        public final static Property ShgParticipant = new Property(10, String.class, "shgParticipant", false, "SHG_PARTICIPANT");
    }


    public ViewReportTrainingDataDao(DaoConfig config) {
        super(config);
    }
    
    public ViewReportTrainingDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIEW_REPORT_TRAINING_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MONTH_CODE\" TEXT," + // 1: monthCode
                "\"YEAR\" TEXT," + // 2: year
                "\"BLOCK_CODE\" TEXT," + // 3: blockCode
                "\"VILLAGE_CODE\" TEXT," + // 4: villageCode
                "\"GP_CODE\" TEXT," + // 5: gpCode
                "\"OTHER_PARTICIPANT\" TEXT," + // 6: otherParticipant
                "\"MEMBER_PARTICIPANT\" TEXT," + // 7: memberParticipant
                "\"TRAINING_CODE\" TEXT," + // 8: trainingCode
                "\"DATE_OF_TRAINING\" TEXT," + // 9: dateOfTraining
                "\"SHG_PARTICIPANT\" TEXT);"); // 10: shgParticipant
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIEW_REPORT_TRAINING_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ViewReportTrainingData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String monthCode = entity.getMonthCode();
        if (monthCode != null) {
            stmt.bindString(2, monthCode);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String blockCode = entity.getBlockCode();
        if (blockCode != null) {
            stmt.bindString(4, blockCode);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(5, villageCode);
        }
 
        String gpCode = entity.getGpCode();
        if (gpCode != null) {
            stmt.bindString(6, gpCode);
        }
 
        String otherParticipant = entity.getOtherParticipant();
        if (otherParticipant != null) {
            stmt.bindString(7, otherParticipant);
        }
 
        String memberParticipant = entity.getMemberParticipant();
        if (memberParticipant != null) {
            stmt.bindString(8, memberParticipant);
        }
 
        String trainingCode = entity.getTrainingCode();
        if (trainingCode != null) {
            stmt.bindString(9, trainingCode);
        }
 
        String dateOfTraining = entity.getDateOfTraining();
        if (dateOfTraining != null) {
            stmt.bindString(10, dateOfTraining);
        }
 
        String shgParticipant = entity.getShgParticipant();
        if (shgParticipant != null) {
            stmt.bindString(11, shgParticipant);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ViewReportTrainingData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String monthCode = entity.getMonthCode();
        if (monthCode != null) {
            stmt.bindString(2, monthCode);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String blockCode = entity.getBlockCode();
        if (blockCode != null) {
            stmt.bindString(4, blockCode);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(5, villageCode);
        }
 
        String gpCode = entity.getGpCode();
        if (gpCode != null) {
            stmt.bindString(6, gpCode);
        }
 
        String otherParticipant = entity.getOtherParticipant();
        if (otherParticipant != null) {
            stmt.bindString(7, otherParticipant);
        }
 
        String memberParticipant = entity.getMemberParticipant();
        if (memberParticipant != null) {
            stmt.bindString(8, memberParticipant);
        }
 
        String trainingCode = entity.getTrainingCode();
        if (trainingCode != null) {
            stmt.bindString(9, trainingCode);
        }
 
        String dateOfTraining = entity.getDateOfTraining();
        if (dateOfTraining != null) {
            stmt.bindString(10, dateOfTraining);
        }
 
        String shgParticipant = entity.getShgParticipant();
        if (shgParticipant != null) {
            stmt.bindString(11, shgParticipant);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ViewReportTrainingData readEntity(Cursor cursor, int offset) {
        ViewReportTrainingData entity = new ViewReportTrainingData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // monthCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // year
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blockCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // villageCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gpCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // otherParticipant
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memberParticipant
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // trainingCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dateOfTraining
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // shgParticipant
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ViewReportTrainingData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMonthCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYear(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlockCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVillageCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGpCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOtherParticipant(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMemberParticipant(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTrainingCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDateOfTraining(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShgParticipant(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ViewReportTrainingData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ViewReportTrainingData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ViewReportTrainingData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

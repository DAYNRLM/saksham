package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_INFO".
*/
public class LoginInfoDao extends AbstractDao<LoginInfo, Long> {

    public static final String TABLENAME = "LOGIN_INFO";

    /**
     * Properties of entity LoginInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutogenratedLogInInfo = new Property(0, Long.class, "autogenratedLogInInfo", true, "_id");
        public final static Property LoginId = new Property(1, String.class, "loginId", false, "LOGIN_ID");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property MobileNo = new Property(3, String.class, "mobileNo", false, "MOBILE_NO");
        public final static Property ServerTimeStamp = new Property(4, String.class, "serverTimeStamp", false, "SERVER_TIME_STAMP");
        public final static Property AppVersion = new Property(5, String.class, "appVersion", false, "APP_VERSION");
        public final static Property LogoutDays = new Property(6, String.class, "logoutDays", false, "LOGOUT_DAYS");
        public final static Property LanguageId = new Property(7, String.class, "languageId", false, "LANGUAGE_ID");
    }


    public LoginInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LoginInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autogenratedLogInInfo
                "\"LOGIN_ID\" TEXT," + // 1: loginId
                "\"PASSWORD\" TEXT," + // 2: password
                "\"MOBILE_NO\" TEXT," + // 3: mobileNo
                "\"SERVER_TIME_STAMP\" TEXT," + // 4: serverTimeStamp
                "\"APP_VERSION\" TEXT," + // 5: appVersion
                "\"LOGOUT_DAYS\" TEXT," + // 6: logoutDays
                "\"LANGUAGE_ID\" TEXT);"); // 7: languageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        Long autogenratedLogInInfo = entity.getAutogenratedLogInInfo();
        if (autogenratedLogInInfo != null) {
            stmt.bindLong(1, autogenratedLogInInfo);
        }
 
        String loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindString(2, loginId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(4, mobileNo);
        }
 
        String serverTimeStamp = entity.getServerTimeStamp();
        if (serverTimeStamp != null) {
            stmt.bindString(5, serverTimeStamp);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(6, appVersion);
        }
 
        String logoutDays = entity.getLogoutDays();
        if (logoutDays != null) {
            stmt.bindString(7, logoutDays);
        }
 
        String languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindString(8, languageId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        Long autogenratedLogInInfo = entity.getAutogenratedLogInInfo();
        if (autogenratedLogInInfo != null) {
            stmt.bindLong(1, autogenratedLogInInfo);
        }
 
        String loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindString(2, loginId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(4, mobileNo);
        }
 
        String serverTimeStamp = entity.getServerTimeStamp();
        if (serverTimeStamp != null) {
            stmt.bindString(5, serverTimeStamp);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(6, appVersion);
        }
 
        String logoutDays = entity.getLogoutDays();
        if (logoutDays != null) {
            stmt.bindString(7, logoutDays);
        }
 
        String languageId = entity.getLanguageId();
        if (languageId != null) {
            stmt.bindString(8, languageId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginInfo readEntity(Cursor cursor, int offset) {
        LoginInfo entity = new LoginInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autogenratedLogInInfo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobileNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serverTimeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // appVersion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // logoutDays
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // languageId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginInfo entity, int offset) {
        entity.setAutogenratedLogInInfo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobileNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setServerTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLogoutDays(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLanguageId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginInfo entity, long rowId) {
        entity.setAutogenratedLogInInfo(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginInfo entity) {
        if(entity != null) {
            return entity.getAutogenratedLogInInfo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginInfo entity) {
        return entity.getAutogenratedLogInInfo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

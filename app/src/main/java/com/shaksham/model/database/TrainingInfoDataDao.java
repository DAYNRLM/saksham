package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAINING_INFO_DATA".
*/
public class TrainingInfoDataDao extends AbstractDao<TrainingInfoData, Void> {

    public static final String TABLENAME = "TRAINING_INFO_DATA";

    /**
     * Properties of entity TrainingInfoData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TrainingId = new Property(0, String.class, "trainingId", false, "TRAINING_ID");
        public final static Property ShgCode = new Property(1, String.class, "shgCode", false, "SHG_CODE");
        public final static Property SyncStatus = new Property(2, String.class, "syncStatus", false, "SYNC_STATUS");
    }


    public TrainingInfoDataDao(DaoConfig config) {
        super(config);
    }
    
    public TrainingInfoDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAINING_INFO_DATA\" (" + //
                "\"TRAINING_ID\" TEXT," + // 0: trainingId
                "\"SHG_CODE\" TEXT," + // 1: shgCode
                "\"SYNC_STATUS\" TEXT);"); // 2: syncStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAINING_INFO_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrainingInfoData entity) {
        stmt.clearBindings();
 
        String trainingId = entity.getTrainingId();
        if (trainingId != null) {
            stmt.bindString(1, trainingId);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(2, shgCode);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(3, syncStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrainingInfoData entity) {
        stmt.clearBindings();
 
        String trainingId = entity.getTrainingId();
        if (trainingId != null) {
            stmt.bindString(1, trainingId);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(2, shgCode);
        }
 
        String syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindString(3, syncStatus);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TrainingInfoData readEntity(Cursor cursor, int offset) {
        TrainingInfoData entity = new TrainingInfoData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // trainingId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shgCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // syncStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrainingInfoData entity, int offset) {
        entity.setTrainingId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setShgCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSyncStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TrainingInfoData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TrainingInfoData entity) {
        return null;
    }

    @Override
    public boolean hasKey(TrainingInfoData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

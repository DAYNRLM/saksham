package com.shaksham.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVALUATION_MASTER_SHG_DATA".
*/
public class EvaluationMasterShgDataDao extends AbstractDao<EvaluationMasterShgData, Long> {

    public static final String TABLENAME = "EVALUATION_MASTER_SHG_DATA";

    /**
     * Properties of entity EvaluationMasterShgData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EvaluationMasterId = new Property(0, Long.class, "evaluationMasterId", true, "_id");
        public final static Property VillageCode = new Property(1, String.class, "villageCode", false, "VILLAGE_CODE");
        public final static Property ShgCode = new Property(2, String.class, "shgCode", false, "SHG_CODE");
        public final static Property EvaluationYear = new Property(3, String.class, "evaluationYear", false, "EVALUATION_YEAR");
        public final static Property EvaluationDate = new Property(4, String.class, "evaluationDate", false, "EVALUATION_DATE");
        public final static Property FirstEvaluationDate = new Property(5, String.class, "firstEvaluationDate", false, "FIRST_EVALUATION_DATE");
        public final static Property SecondEvaluationDate = new Property(6, String.class, "secondEvaluationDate", false, "SECOND_EVALUATION_DATE");
        public final static Property ThirdEvaluationDate = new Property(7, String.class, "thirdEvaluationDate", false, "THIRD_EVALUATION_DATE");
        public final static Property FourthEvaluationDate = new Property(8, String.class, "fourthEvaluationDate", false, "FOURTH_EVALUATION_DATE");
        public final static Property FirstTrainingdate = new Property(9, String.class, "firstTrainingdate", false, "FIRST_TRAININGDATE");
        public final static Property EvaluationStatus = new Property(10, String.class, "evaluationStatus", false, "EVALUATION_STATUS");
        public final static Property MaximunEvaluationdate = new Property(11, String.class, "maximunEvaluationdate", false, "MAXIMUN_EVALUATIONDATE");
        public final static Property Evaluationdonestatus = new Property(12, String.class, "evaluationdonestatus", false, "EVALUATIONDONESTATUS");
    }


    public EvaluationMasterShgDataDao(DaoConfig config) {
        super(config);
    }
    
    public EvaluationMasterShgDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVALUATION_MASTER_SHG_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: evaluationMasterId
                "\"VILLAGE_CODE\" TEXT," + // 1: villageCode
                "\"SHG_CODE\" TEXT," + // 2: shgCode
                "\"EVALUATION_YEAR\" TEXT," + // 3: evaluationYear
                "\"EVALUATION_DATE\" TEXT," + // 4: evaluationDate
                "\"FIRST_EVALUATION_DATE\" TEXT," + // 5: firstEvaluationDate
                "\"SECOND_EVALUATION_DATE\" TEXT," + // 6: secondEvaluationDate
                "\"THIRD_EVALUATION_DATE\" TEXT," + // 7: thirdEvaluationDate
                "\"FOURTH_EVALUATION_DATE\" TEXT," + // 8: fourthEvaluationDate
                "\"FIRST_TRAININGDATE\" TEXT," + // 9: firstTrainingdate
                "\"EVALUATION_STATUS\" TEXT," + // 10: evaluationStatus
                "\"MAXIMUN_EVALUATIONDATE\" TEXT," + // 11: maximunEvaluationdate
                "\"EVALUATIONDONESTATUS\" TEXT);"); // 12: evaluationdonestatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVALUATION_MASTER_SHG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvaluationMasterShgData entity) {
        stmt.clearBindings();
 
        Long evaluationMasterId = entity.getEvaluationMasterId();
        if (evaluationMasterId != null) {
            stmt.bindLong(1, evaluationMasterId);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(2, villageCode);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String evaluationYear = entity.getEvaluationYear();
        if (evaluationYear != null) {
            stmt.bindString(4, evaluationYear);
        }
 
        String evaluationDate = entity.getEvaluationDate();
        if (evaluationDate != null) {
            stmt.bindString(5, evaluationDate);
        }
 
        String firstEvaluationDate = entity.getFirstEvaluationDate();
        if (firstEvaluationDate != null) {
            stmt.bindString(6, firstEvaluationDate);
        }
 
        String secondEvaluationDate = entity.getSecondEvaluationDate();
        if (secondEvaluationDate != null) {
            stmt.bindString(7, secondEvaluationDate);
        }
 
        String thirdEvaluationDate = entity.getThirdEvaluationDate();
        if (thirdEvaluationDate != null) {
            stmt.bindString(8, thirdEvaluationDate);
        }
 
        String fourthEvaluationDate = entity.getFourthEvaluationDate();
        if (fourthEvaluationDate != null) {
            stmt.bindString(9, fourthEvaluationDate);
        }
 
        String firstTrainingdate = entity.getFirstTrainingdate();
        if (firstTrainingdate != null) {
            stmt.bindString(10, firstTrainingdate);
        }
 
        String evaluationStatus = entity.getEvaluationStatus();
        if (evaluationStatus != null) {
            stmt.bindString(11, evaluationStatus);
        }
 
        String maximunEvaluationdate = entity.getMaximunEvaluationdate();
        if (maximunEvaluationdate != null) {
            stmt.bindString(12, maximunEvaluationdate);
        }
 
        String evaluationdonestatus = entity.getEvaluationdonestatus();
        if (evaluationdonestatus != null) {
            stmt.bindString(13, evaluationdonestatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvaluationMasterShgData entity) {
        stmt.clearBindings();
 
        Long evaluationMasterId = entity.getEvaluationMasterId();
        if (evaluationMasterId != null) {
            stmt.bindLong(1, evaluationMasterId);
        }
 
        String villageCode = entity.getVillageCode();
        if (villageCode != null) {
            stmt.bindString(2, villageCode);
        }
 
        String shgCode = entity.getShgCode();
        if (shgCode != null) {
            stmt.bindString(3, shgCode);
        }
 
        String evaluationYear = entity.getEvaluationYear();
        if (evaluationYear != null) {
            stmt.bindString(4, evaluationYear);
        }
 
        String evaluationDate = entity.getEvaluationDate();
        if (evaluationDate != null) {
            stmt.bindString(5, evaluationDate);
        }
 
        String firstEvaluationDate = entity.getFirstEvaluationDate();
        if (firstEvaluationDate != null) {
            stmt.bindString(6, firstEvaluationDate);
        }
 
        String secondEvaluationDate = entity.getSecondEvaluationDate();
        if (secondEvaluationDate != null) {
            stmt.bindString(7, secondEvaluationDate);
        }
 
        String thirdEvaluationDate = entity.getThirdEvaluationDate();
        if (thirdEvaluationDate != null) {
            stmt.bindString(8, thirdEvaluationDate);
        }
 
        String fourthEvaluationDate = entity.getFourthEvaluationDate();
        if (fourthEvaluationDate != null) {
            stmt.bindString(9, fourthEvaluationDate);
        }
 
        String firstTrainingdate = entity.getFirstTrainingdate();
        if (firstTrainingdate != null) {
            stmt.bindString(10, firstTrainingdate);
        }
 
        String evaluationStatus = entity.getEvaluationStatus();
        if (evaluationStatus != null) {
            stmt.bindString(11, evaluationStatus);
        }
 
        String maximunEvaluationdate = entity.getMaximunEvaluationdate();
        if (maximunEvaluationdate != null) {
            stmt.bindString(12, maximunEvaluationdate);
        }
 
        String evaluationdonestatus = entity.getEvaluationdonestatus();
        if (evaluationdonestatus != null) {
            stmt.bindString(13, evaluationdonestatus);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvaluationMasterShgData readEntity(Cursor cursor, int offset) {
        EvaluationMasterShgData entity = new EvaluationMasterShgData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // evaluationMasterId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // villageCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shgCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // evaluationYear
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // evaluationDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstEvaluationDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // secondEvaluationDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // thirdEvaluationDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fourthEvaluationDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // firstTrainingdate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // evaluationStatus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // maximunEvaluationdate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // evaluationdonestatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvaluationMasterShgData entity, int offset) {
        entity.setEvaluationMasterId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVillageCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShgCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEvaluationYear(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEvaluationDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstEvaluationDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSecondEvaluationDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThirdEvaluationDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFourthEvaluationDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFirstTrainingdate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEvaluationStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMaximunEvaluationdate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEvaluationdonestatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvaluationMasterShgData entity, long rowId) {
        entity.setEvaluationMasterId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvaluationMasterShgData entity) {
        if(entity != null) {
            return entity.getEvaluationMasterId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvaluationMasterShgData entity) {
        return entity.getEvaluationMasterId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
